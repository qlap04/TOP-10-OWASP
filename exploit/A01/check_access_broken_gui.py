import requests
import tkinter as tk
from tkinter import ttk, scrolledtext
import threading

class BrokenAccessChecker:
    def __init__(self, root):
        self.root = root
        self.root.title("Kiểm Tra Broken Access Control")
        self.root.geometry("900x700")
        self.root.configure(bg="#f0f0f0")  # Màu nền cho cửa sổ

        # Danh sách endpoint phổ biến (50 endpoint)
        self.endpoints = [
            "/admin", "/users", "/users/admin", "/users/profile", "/users/edit",
            "/api/users", "/api/admin", "/api/profile", "/api/settings", "/api/roles",
            "/dashboard", "/settings", "/profile", "/manage", "/management",
            "/user", "/user/edit", "/user/delete", "/user/update", "/user/view",
            "/admin/users", "/admin/profile", "/admin/settings", "/admin/dashboard", "/admin/api",
            "/api/v1/users", "/api/v1/admin", "/api/v1/profile", "/api/v1/settings", "/api/v1/roles",
            "/books", "/borrows", "/borrows/admin", "/api/books", "/api/borrows",
            "/reports", "/logs", "/config", "/backup", "/download",
            "/secure", "/private", "/restricted", "/internal", "/secret",
            "/data", "/files", "/uploads", "/system", "/debug"
        ]

        # Giao diện GUI
        self.create_gui()

    def create_gui(self):
        # Frame cho form nhập liệu
        form_frame = tk.Frame(self.root, bg="#e6f3ff", bd=2, relief="groove")
        form_frame.pack(pady=10, padx=10, fill="x")

        # Nhãn và trường nhập Base URL
        tk.Label(form_frame, text="url:", font=("Arial", 12, "bold"), fg="#003087", bg="#e6f3ff").pack(pady=5)
        self.url_entry = tk.Entry(form_frame, width=50, font=("Arial", 12), bg="#ffffff", fg="#333333", bd=2, relief="sunken")
        self.url_entry.pack(pady=5)
        self.url_entry.insert(0, "http://192.168.1.2:4000")

        # Nhãn và trường nhập Username (Email)
        tk.Label(form_frame, text="email:", font=("Arial", 12, "bold"), fg="#003087", bg="#e6f3ff").pack(pady=5)
        self.username_entry = tk.Entry(form_frame, width=50, font=("Arial", 12), bg="#ffffff", fg="#333333", bd=2, relief="sunken")
        self.username_entry.pack(pady=5)
        self.username_entry.insert(0, "tester@example.com")

        # Nhãn và trường nhập Password
        tk.Label(form_frame, text="pass:", font=("Arial", 12, "bold"), fg="#003087", bg="#e6f3ff").pack(pady=5)
        self.password_entry = tk.Entry(form_frame, width=50, show="*", font=("Arial", 12), bg="#ffffff", fg="#333333", bd=2, relief="sunken")
        self.password_entry.pack(pady=5)
        self.password_entry.insert(0, "123")

        # Nút bắt đầu kiểm tra
        self.start_button = tk.Button(self.root, text="Bắt Đầu Kiểm Tra", command=self.start_check, font=("Arial", 12, "bold"), bg="#4CAF50", fg="white", bd=2, relief="raised")
        self.start_button.pack(pady=10)

        # Vùng hiển thị kết quả chi tiết
        tk.Label(self.root, text="Kết Quả Chi Tiết:", font=("Arial", 12, "bold"), fg="#003087").pack(pady=5)
        self.result_text = scrolledtext.ScrolledText(self.root, width=90, height=15, wrap=tk.WORD, font=("Arial", 10), bg="#f9f9f9", fg="#333333", bd=2, relief="sunken")
        self.result_text.pack(pady=5)

        # Vùng hiển thị các endpoint thành công (mã 200)
        tk.Label(self.root, text="Các Endpoint Thành Công (Mã 200):", font=("Arial", 12, "bold"), fg="#003087").pack(pady=5)
        self.success_text = scrolledtext.ScrolledText(self.root, width=90, height=5, wrap=tk.WORD, font=("Arial", 10), bg="#e0ffe0", fg="#006400", bd=2, relief="sunken")
        self.success_text.pack(pady=5)

    def log(self, message, success=False):
        """Ghi log kết quả vào vùng hiển thị."""
        self.result_text.insert(tk.END, message + "\n")
        self.result_text.see(tk.END)
        if success:
            self.success_text.insert(tk.END, message + "\n")
            self.success_text.see(tk.END)
        self.root.update()

    def check_server_status(self, base_url):
        """Kiểm tra trạng thái server trước khi chạy."""
        try:
            response = requests.get(base_url, timeout=5)
            if response.status_code in [200, 302]:
                self.log("[+] Server đang chạy!")
                return True
            else:
                self.log(f"[-] Server trả về mã trạng thái không mong đợi: {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            self.log(f"[-] Không thể kết nối đến server: {e}")
            self.log("[-] Vui lòng kiểm tra server tại URL bạn nhập và chạy lại!")
            return False

    def login(self, session, base_url, username, password):
        """Đăng nhập để lấy cookie phiên."""
        login_url = f"{base_url}/users/login"
        data = {"email": username, "password": password}
        try:
            response = session.post(login_url, data=data, allow_redirects=False, timeout=5)
            if response.status_code == 302 and response.headers.get("Location") == "/books":
                self.log("[+] Đăng nhập thành công!")
                return True
            else:
                self.log(f"[-] Đăng nhập thất bại. Mã trạng thái: {response.status_code}")
                self.log(f"[-] Phản hồi: {response.text[:200]}")
                self.log("[-] Vui lòng kiểm tra lại username/password (gợi ý: teststudent@example.com, mật khẩu: 123)")
                return False
        except requests.exceptions.RequestException as e:
            self.log(f"[-] Lỗi kết nối khi đăng nhập: {e}")
            return False

    def test_endpoint(self, session, url, method="GET", data=None):
        """Thử truy cập một endpoint và kiểm tra phản hồi."""
        try:
            if method == "GET":
                response = session.get(url, timeout=5)
            elif method == "POST":
                response = session.post(url, data=data, timeout=5)
            message = f"[*] Yêu cầu {method} tới {url}:\n    - Mã trạng thái: {response.status_code}\n    - Nội dung phản hồi (giới hạn 200 ký tự): {response.text[:200]}"
            if response.status_code == 200:
                self.log(message, success=True)
            else:
                self.log(message)
            return response
        except requests.exceptions.RequestException as e:
            self.log(f"[-] Lỗi kết nối tới {url}: {e}")
            return None

    def check_broken_access(self):
        """Kiểm tra các endpoint tiềm năng và tham số để phát hiện Broken Access Control."""
        base_url = self.url_entry.get().strip()
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()

        if not base_url or not username or not password:
            self.log("[-] Vui lòng điền đầy đủ thông tin!")
            return

        session = requests.Session()

        # Kiểm tra trạng thái server
        if not self.check_server_status(base_url):
            return

        # Đăng nhập để lấy cookie phiên
        if not self.login(session, base_url, username, password):
            return

        # Kiểm tra các endpoint
        self.log("\n=== Kiểm Tra Các Endpoint ===")
        for endpoint in self.endpoints:
            full_url = f"{base_url}{endpoint}"
            # Thử GET
            self.test_endpoint(session, full_url, method="GET")
            # Thử POST với tham số giả (nếu áp dụng)
            if "profile" in endpoint or "edit" in endpoint:
                # Thử nâng quyền qua POST
                data = {"roleId": "1"}  # Nâng quyền thành Admin
                self.test_endpoint(session, full_url, method="POST", data=data)

        # Kiểm tra tham số (IDOR)
        self.log("\n=== Kiểm Tra Tham Số (IDOR) ===")
        user_ids = ["68012953ec2ea1fe3b753ef4", "68012953ec2ea1fe3b753ef5", "999"]
        for user_id in user_ids:
            full_url = f"{base_url}/users/{user_id}"
            self.test_endpoint(session, full_url, method="GET")

    def start_check(self):
        """Chạy kiểm tra trong một thread để không làm treo GUI."""
        self.start_button.config(state="disabled")
        self.result_text.delete(1.0, tk.END)
        self.success_text.delete(1.0, tk.END)
        threading.Thread(target=self.run_check, daemon=True).start()

    def run_check(self):
        """Chạy kiểm tra và kích hoạt lại nút sau khi hoàn tất."""
        self.check_broken_access()
        self.start_button.config(state="normal")

if __name__ == "__main__":
    root = tk.Tk()
    app = BrokenAccessChecker(root)
    root.mainloop()